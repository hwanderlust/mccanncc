{"version":3,"sources":["components/Nav/Search.js","components/Nav/Navbar.js","components/Tile/TileContainer.js","components/Header.js","components/Home.js","App.js","serviceWorker.js","index.js","methods/index.js","contexts/index.js"],"names":["Search","state","text","handleChange","e","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","console","log","url","concat","fetch","method","then","r","json","context","handleSearch","catch","err","react_default","a","createElement","onSubmit","this","type","className","placeholder","onChange","React","PureComponent","contextType","StoreConsumer","Navbar","memo","contexts","ctx","NavLink","exact","to","activeClassName","favorited","Nav_Search","withRouter","Tile","lazy","__webpack_require__","bind","TileContainer","data","renderTiles","map","tile","favs","localStorage","getItem","JSON","parse","filter","el","id","length","key","fav","prevProps","prevState","_this2","react","delayMs","fallback","Component","Header","search","Home","Fragment","components_Header","Tile_TileContainer","Favorites","App","Nav_Navbar","Switch","Route","path","component","render","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","serialize","compiled","kind","slice","title","author","picture","banner_img","header_img","icon_img","thumbnail","score","subscribers","description","creation","calcTime","created_utc","permalink","pluralize","num","words","Math","floor","utcTime","time","Date","getTime","toFixed","StoreContext","createContext","Consumer","StoreProvider","_React$Component","_getPrototypeOf2","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","handleFavoriting","handleUnfavoriting","favorites","handleInitialDataFetch","children","handlePersistingFavs","savedFavs","makeFunctionsAvailable","newFavs","push","objectSpread","setItem","stringify","tileId","rawData","inherits","createClass","Provider","props"],"mappings":"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","file":"static/js/main.a9747d3e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { StoreConsumer } from '../../contexts';\r\n\r\nclass Search extends React.PureComponent {\r\n\r\n  static contextType = StoreConsumer;\r\n\r\n  state = {\r\n    text: ''\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n  \r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    console.log(this.state.text)\r\n\r\n    const url = `https://www.reddit.com/subreddits/search.json?q=${this.state.text}`\r\n    const options = {\r\n      method: 'GET'\r\n    }\r\n\r\n    fetch(url, options)\r\n    .then(r => r.json())\r\n    .then(r => {\r\n      console.log(`raw`, r)\r\n      this.context.handleSearch(r)\r\n    })\r\n    .catch(err => console.log(err))\r\n  }\r\n  \r\n  render() {\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input type='text' className='search-bar' name='text' placeholder='search subreddits' value={this.state.text} onChange={this.handleChange} />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search","import React, { memo } from 'react';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport Search from \"./Search\";\r\nimport { StoreConsumer } from '../../contexts';\r\n\r\nconst Navbar = memo(() => {\r\n\r\n\r\n  return (\r\n\r\n    <StoreConsumer>\r\n\r\n      {ctx => (\r\n\r\n        <nav className=\"nav-bar\">\r\n\r\n          <NavLink exact to=\"/\" className=\"nav-item\" activeClassName=\"active\">\r\n            <i className=\"fab fa-reddit-alien\" />\r\n            Home\r\n          </NavLink>\r\n\r\n          <NavLink to=\"/favorites\" className=\"nav-item\" activeClassName=\"active\">\r\n            <i className=\"fas fa-heart\" />\r\n            Favorites ({ ctx.favorited })\r\n          </NavLink>\r\n\r\n          <Search />\r\n        </nav>\r\n      \r\n      )}\r\n  \r\n    </StoreConsumer>\r\n  ); \r\n})\r\n\r\nexport default withRouter(Navbar)","import React, { Component, Suspense, lazy } from 'react';\r\nimport { StoreConsumer } from '../../contexts';\r\n\r\nconst Tile = lazy(() => import('./Tile'))\r\n\r\n\r\nclass TileContainer extends Component {\r\n\r\n  static contextType = StoreConsumer;\r\n\r\n  state = {\r\n    data: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(`tilecontainer mounted`)\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(`tilecontainer updated`, this.context)\r\n  }\r\n\r\n  renderTiles = () => {\r\n    return this.state.data.map(tile => {\r\n\r\n      let favs = localStorage.getItem('favs')\r\n\r\n      if (favs) {\r\n        favs = JSON.parse(favs)\r\n\r\n        const fav = favs.filter(el => el.id === tile.id)\r\n\r\n        if (fav.length) {\r\n          return <Tile key={tile.id} tile={tile} fav={true} />\r\n        }\r\n      }\r\n\r\n      return <Tile key={tile.id} tile={tile} fav={false} />\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <StoreConsumer>\r\n        { ctx => {\r\n          \r\n          if(ctx.data !== this.state.data) {\r\n            this.setState({\r\n                data: ctx.data\r\n            }, () => console.log(`updated state`))\r\n          }\r\n\r\n          return (\r\n\r\n            <main className='tile-area'>\r\n              <Suspense delayMs={1000} fallback={<div>Loading...</div>}>\r\n\r\n                { this.state.data ? this.renderTiles() : null }\r\n\r\n              </Suspense>\r\n            </main>\r\n\r\n          )}\r\n        }\r\n      </StoreConsumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TileContainer;","import React, { memo } from 'react';\r\nimport { StoreConsumer } from '../contexts'\r\n\r\nconst Header = memo(() => {\r\n\r\n  return (\r\n    <StoreConsumer>\r\n      { ctx => (\r\n        <header>\r\n          <h1>{ ctx.search }</h1>\r\n        </header>\r\n      )}\r\n    </StoreConsumer>\r\n  )\r\n});\r\n\r\nexport default Header;","import React from 'react';\r\nimport TileContainer from './Tile/TileContainer';\r\nimport Header from './Header';\r\n// import WindowingTileContainer from './WindowingTileContainer';\r\n\r\nconst Home = () => {\r\n  \r\n  return (\r\n    <>\r\n      <Header />      \r\n      <TileContainer />\r\n      {/* <WindowingTileContainer /> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home;","import React, { Component, Suspense, lazy } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './css/App.scss';\nimport Navbar from './components/Nav/Navbar';\nimport Home from './components/Home'\n\nconst Favorites = lazy(() => import('./components/Favorites'))\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <Navbar />\n\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/favorites\" render={() => (\n              <Suspense delayMs={1000} fallback={<div>Loading!</div>}>\n                <Favorites />\n              </Suspense>\n          )} />\n        </Switch>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreProvider } from \"./contexts/\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </BrowserRouter>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const serialize = (data) => {\r\n\r\n  const baseUrl = `https://www.reddit.com`\r\n  const compiled = {}\r\n\r\n  compiled.id = data.id\r\n  compiled.kind = data.name.slice(0,2)\r\n  compiled.title = data.title || \"\"\r\n  compiled.author = data.author || data.name || \"\"\r\n  compiled.picture = compiled.kind === 't3' ? data.url : data.banner_img || data.header_img || data.icon_img || \"http://i.imgur.com/lqHeX.jpg\"\r\n  compiled.thumbnail = data.thumbnail || \"\"\r\n  compiled.score = data.score || data.subscribers || 0\r\n  compiled.description = data.description || \"\"\r\n  compiled.creation = calcTime(data.created_utc)\r\n  compiled.url = data.permalink ? baseUrl + data.permalink : data.url  \r\n\r\n  return compiled\r\n}\r\n\r\nexport const pluralize = (num, words) => {\r\n  \r\n  if (Math.floor(num) === 1) {\r\n    return num + ` ${words}`\r\n\r\n  } else {\r\n    return num + ` ${words}s`\r\n  }\r\n}\r\n\r\nexport const calcTime = (utcTime) => {\r\n\r\n  let time = ((new Date().getTime() - new Date(utcTime * 1000)) / (1000 * 60 * 60))\r\n\r\n  if (time > 24) {\r\n\r\n    time = ((new Date().getTime() - new Date(utcTime * 1000)) / (1000 * 60 * 60 * 24)).toFixed(0)\r\n    return pluralize(time, `day`) + ` ago`\r\n\r\n  } else if (time < 1) {\r\n\r\n    time = ((new Date().getTime() - new Date(utcTime * 1000)) / (1000 * 60)).toFixed(0)\r\n    return pluralize(time, `minute`) + ` ago`\r\n\r\n  } else {\r\n\r\n    time = time.toFixed(0)\r\n    return pluralize(time, `hour`) + ` ago`\r\n  }\r\n}","import React from 'react';\r\nimport { serialize } from \"../methods\";\r\n\r\nconst StoreContext = React.createContext();\r\n\r\nexport const StoreConsumer = StoreContext.Consumer\r\n\r\nexport class StoreProvider extends React.Component {\r\n\r\n  state = {\r\n    favorited: 0,\r\n    handleSearch: null,\r\n    handleFavoriting: null,\r\n    handleUnfavoriting: null,\r\n    favorites: [],\r\n    data: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(`ctx mounted`)\r\n    this.handleInitialDataFetch()\r\n    this.handlePersistingFavs()\r\n    this.makeFunctionsAvailable()\r\n  }\r\n\r\n  handleInitialDataFetch = () => {\r\n    fetch(\"https://www.reddit.com/r/analog/top/.json\")\r\n      .then(r => r.json())\r\n      .then(r => {\r\n        console.log(r)\r\n\r\n        this.setState(prevState => {\r\n          return {\r\n            data: r.data.children.map(el => serialize(el.data))\r\n          }\r\n        }, () => console.log(this.state))\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n  \r\n\r\n  handlePersistingFavs = () => {\r\n    const savedFavs = localStorage.getItem(\"favs\")\r\n    const favorites = JSON.parse(savedFavs)\r\n\r\n    if (savedFavs) {\r\n      this.setState({\r\n\r\n        favorites,\r\n        favorited: favorites.length\r\n\r\n      }, () => console.log(`StoreProvider DidMount:`, this.state))\r\n    }\r\n  }\r\n\r\n  makeFunctionsAvailable = () => {\r\n\r\n    this.setState({\r\n      handleSearch: this.handleSearch,\r\n      handleFavoriting: this.handleFavoriting,\r\n      handleUnfavoriting: this.handleUnfavoriting\r\n    });\r\n  }\r\n\r\n  handleFavoriting = (tile) => {\r\n    this.setState(prevState => {\r\n\r\n      const savedFavs = localStorage.getItem('favs')\r\n      let newFavs\r\n\r\n      if(savedFavs) {\r\n        newFavs = JSON.parse(savedFavs)\r\n      \r\n      } else {\r\n        newFavs = prevState.favorites\r\n      }\r\n\r\n      newFavs.push({...tile})\r\n\r\n      localStorage.setItem('favs', JSON.stringify(newFavs))\r\n\r\n      return {\r\n        favorited: ++prevState.favorited,\r\n        favorites: newFavs\r\n      }\r\n    }, () => console.log(this.state))\r\n  }\r\n\r\n  handleUnfavoriting = (tileId) => {\r\n\r\n    const savedFavs = localStorage.getItem(\"favs\")\r\n    let newFavs\r\n    \r\n    this.setState(prevState => {\r\n      \r\n      if(savedFavs) {\r\n        newFavs = JSON.parse(savedFavs).filter(fav => fav.id !== tileId)\r\n      \r\n      } else {\r\n        newFavs = prevState.favorites.filter(fav => fav.id !== tileId)  \r\n      }\r\n\r\n      localStorage.setItem('favs', JSON.stringify(newFavs))\r\n\r\n      return {\r\n        favorited: --prevState.favorited,\r\n        favorites: newFavs\r\n      }\r\n    }, () => console.log(this.state))\r\n  }\r\n\r\n  handleSearch = (rawData) => {\r\n\r\n    console.log(rawData.data.children)\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        data: rawData.data.children.map(el => serialize(el.data))\r\n      }\r\n    }, () => console.log(this.state))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StoreContext.Provider value={this.state}>\r\n        { this.props.children }\r\n      </StoreContext.Provider>\r\n    )\r\n  }\r\n}"],"sourceRoot":""}